/*
 * File: app/controller/Ball.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('MyApp.controller.Ball', {
    extend: 'Ext.app.Controller',

    config: {

    },

    checkCollisions: function(ball) {
        var leftPaddle  = MyApp.app.paddleLeft.element.getBox(),
            rightPaddle = MyApp.app.paddleRight.element.getBox(),
            ballBox     = ball.getBox(),
            ballHeight  = ball.getHeight(),
            collisionX  = false,
            collisionY  = false,
            surfaceBox;

        if (!MyApp.app.surface) { 
            MyApp.app.surface = Ext.ComponentQuery.query('viewport > panel')[0].element.down('.x-panel-inner'); 
        }
        surfaceBox = MyApp.app.surface.getBox();

        //check collision with borders
        if (ballBox.left < surfaceBox.left) {
            MyApp.app.dispatch({
                controller : 'Referee',
                action     : 'incrementScore',
                args       : []
            });

            return false;
        }
        else if (ballBox.right > surfaceBox.right) {
            MyApp.app.dispatch({
                controller : 'Referee',
                action     : 'incrementScore',
                args       : []
            });

            return false;
        }
        if (ballBox.top < surfaceBox.top || ballBox.bottom > surfaceBox.bottom) {
            collisionY = true;
        }
        //check collision with paddles
        if (ballBox.left < leftPaddle.right && 
        ballBox.bottom >= leftPaddle.top && 
        ballBox.top <= leftPaddle.bottom) { collisionX = true; }

        else if (ballBox.right > rightPaddle.left &&
        ballBox.bottom >= rightPaddle.top && 
        ballBox.top <= rightPaddle.bottom) { collisionX = true; }


        //change ball direction, if necessary
        this.getDirection(collisionX, collisionY);

        return true;
    },

    update: function(ball) {
        var el  = ball.element,
            pos = el.getXY(),
            x, y;

        if (!this.direction) {
            this.direction = [ 1, 1 ];
        }

        //calculate new [ x, y ]
        x = pos[0] - 2 * this.direction[0];
        y = pos[1] - 3 * this.direction[1];
        el.setXY([ x, y ]);

        //check XY coordinates to see if player has scored
        if (this.checkCollisions(el)) {
            //This is FAR more efficient than using dispatch()!
            MyApp.controller.Paddle.prototype.updateCPU([x,y]);
        }
        else {
            MyApp.app.stopGame();
        }
    },

    getDirection: function(collisionX, collisionY) {
        if (collisionX) { this.direction[0] *= -1; }
        if (collisionY) { this.direction[1] *= -1; }
    }

});